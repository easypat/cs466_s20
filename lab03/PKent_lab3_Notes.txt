Patrick Kent
13 Feb 2020
CS466
Lab 3 Notes

Lab Report Questions
1,2(sic): How much effort did it take to get the basic heartbeat-only task working?
	It took minimal effort to get the heartbeat task working. If I didn't know what the scheduler was like, I'd probably have to spend some time learning how xTaskCreate and vTaskStartScheduler work.
3: What does casting something as (void *) do?
	It allows you to pass by reference an object, whereby it can be cast/converted as the appropriate type within the function.
4: After setting up both producer functions to create messages at roughly 10Hz,
	bumping the consumer task down to idle priority, and upping the delay time to at least 60, one of the producer functions asserts. This happens because the consumer is pulling messages from the queue slower than the producers can fill it, causing a queue full error.
5:	a. The other threads have stopped, including the heartbeat.
	b. The other threads stopped because of the function in assert labelled
	"taskENTER_CRITICAL()," which while declaring that a critical code section
	has been entered also prevents any preemptive context switching, i.e. to other threads.
6:


METHOD
1. cp *.h *.c Makefile makedefs ../lab03
2. Rename blinkyRTOS.c -> producerConsumer.c
3. Remove red/blue heartbeat functions, interrupt setup functions, and red/blue tasks from old file
4. Copy _configureUART setup function and includes from serialStubs.c -> producerConsumer.c
5. Inserted UART print statement inside infiniwhile loop
	a. Remembered to enable GPIOA in the hardware setup. (rescinded)
6. Created a consumer task to take a message from the queue every 10ms.
7. Created a producer task to place a message in the queue at random intervals.
	a. Random intervals are determined by the RandomSeed() function from TivaDriver/utils/random.c using a uint32_t.
8. Removed random.c reference as the only function available was a seed function.
9. Reimplemented a pseudo-random function:
		r = (95+(((r<<3)+93)*53)%11)
					and
		r = (95+(((r<<3)+101)*79)%10)
	a. Each producer function delays xQueueSend tasks from 95-105ms.
10. Changed the delay to 60ms to force the queue to fill up, forcing a producer function to assert.
11. Edited k_ACM0 to reflect the file in the slides.
12. Reviewed Build and Debug Basics pdf.
13. Added 'set auto-load safe-path /' to existing .gdbinit file in $HOME
14. Edited existing .gdbinit file to match exact init file in Build and Debug pdf.
	a. Realized that changing this file to the one from slides breaks gdb; reverted to default.
14. Started the OpenOCD server with the following command:
	a. openocd --file board/ek-tm4c123gxl.cfg -c init -c halt
15. Started gdb with the following command:
	a. arm-none-eabi-gdb gcc/producerConsumer.axf
16. (DATA) Using the command 'x/16g 0' the first 16 32-bit words are the following:
	0x0 		<g_pfnVectors>:	0x00002a3520007514	0x00002acf00002ac9
	0x10 	 <g_pfnVectors+16>:	0x00002ad500002ad5	0x0000000000002ad5
	0x20 	 <g_pfnVectors+32>:	0x0000000000000000	0x00000df100000000
	0x30 	 <g_pfnVectors+48>:	0x0000000000002ad5	0x000010a900001041
	0x40 	 <g_pfnVectors+64>:	0x00002ad500002ad5	0x00002ad500002ad5
	0x50 	 <g_pfnVectors+80>:	0x00002ad500002ad5	0x00002ad500002ad5
	0x60 	 <g_pfnVectors+96>:	0x00002ad500002ad5	0x00002ad500002ad5
	0x70 	<g_pfnVectors+112>:	0x00002ad500002ad5	0x00002ad500002ad5
17. (DATA) Using 'i r' for 'info registers' gives the processor registers:
	r0             0x22                34
	r1             0x62762804          1651910660
	r2             0x13                19
	r3             0x14                20
	r4             0x20000504          536872196
	r5             0x20007600          536901120
	r6             0xa5a5a5a5          -1515870811
	r7             0x200004b0          536872112
	r8             0xa5a5a5a5          -1515870811
	r9             0xa5a5a5a5          -1515870811
	r10            0xa5a5a5a5          -1515870811
	r11            0xa5a5a5a5          -1515870811
	r12            0x200000a8          536871080
	sp             0x200004b0          0x200004b0 <ucHeap+1188>
	lr             0x29ad              10669
	pc             0x2a34              0x2a34 <ResetISR>
	xPSR           0x21000000          553648128
	fpscr          0x0                 0
	msp            0x20007514          0x20007514 <pui32MainStack>
	psp            0x0                 0x0 <g_pfnVectors>
	primask        0x0                 0
	basepri        0x0                 0
	faultmask      0x0                 0
	control        0x0                 0
18. (DATA) Using 'i b' for 'info breakpoints' gives the list of set breakpoints:
	Num     Type           Disp Enb Address    What
	1       breakpoint     keep y   0x000027c2 in main at producerConsumer.c:226
19. Decremented consumer delay by 1ms to test 'make' command in gdb.
20. Running 'make,' 'reload,' and then 'c' within gdb recompiles producerConsumer.c, loads .text at 0x0 of size 0x2f16 and .data at 0x2f16 of size 0x8. Code starts at 0x2a34.
21. The following are gdb commands with their results:
	reload:		Loads .text and .data blocks onto the Tiva board, not unlike the lm4flash.
	i b:		Abbreviated form of 'info breakpoints.' Lists all set breakpoints.
	i r:		Abbreviated form of 'info registers.' Lists all registers in the stack frame.
	l:			Abbreviated form of 'list.' Lists 10 or more lines around the previous listing.
	mr:			Unknown; this command asks if you mean 'maintenance' or 'mem.'
	p <var> or 
	p {var, var, ...}: This prints the current value of the given variables in the current stack frame.
	s:			Steps through the current program until a different source line is reached.
	n:			Steps to next source line, without entering subroutines (useful for avoiding long for loops!).